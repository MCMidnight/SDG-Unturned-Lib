using System;
using System.Runtime.InteropServices;
using System.Threading;

namespace SDG.Unturned
{
	/// <summary>
	/// Uses the Win32 API to force a console to be created and destroyed.
	/// </summary>
	// Token: 0x020003E9 RID: 1001
	public static class WindowsConsole
	{
		// Token: 0x06001DD0 RID: 7632
		[DllImport("kernel32.dll", SetLastError = true)]
		public static extern bool AllocConsole();

		// Token: 0x06001DD1 RID: 7633
		[DllImport("kernel32.dll", SetLastError = true)]
		public static extern bool FreeConsole();

		// Token: 0x06001DD2 RID: 7634
		[DllImport("kernel32.dll", SetLastError = true)]
		private static extern bool SetConsoleOutputCP(uint wCodePageID);

		// Token: 0x06001DD3 RID: 7635
		[DllImport("kernel32.dll", SetLastError = true)]
		public static extern bool SetConsoleCP(uint wCodePageID);

		/// <summary>
		/// Allocate Windows console if enabled.
		/// </summary>
		// Token: 0x06001DD4 RID: 7636 RVA: 0x0006C9F0 File Offset: 0x0006ABF0
		public static void conditionalAlloc()
		{
			if (WindowsConsole.shouldManageConsole && !WindowsConsole.AllocConsole())
			{
				int lastWin32Error = Marshal.GetLastWin32Error();
				UnturnedLog.warn("Unable to allocate Windows console: {0}", new object[]
				{
					lastWin32Error
				});
			}
		}

		/// <summary>
		/// Free Windows console if enabled.
		/// </summary>
		// Token: 0x06001DD5 RID: 7637 RVA: 0x0006CA30 File Offset: 0x0006AC30
		public static void conditionalFree()
		{
			if (WindowsConsole.shouldManageConsole && !WindowsConsole.FreeConsole())
			{
				int lastWin32Error = Marshal.GetLastWin32Error();
				UnturnedLog.warn("Unable to free Windows console: {0}", new object[]
				{
					lastWin32Error
				});
			}
		}

		// Token: 0x06001DD6 RID: 7638 RVA: 0x0006CA70 File Offset: 0x0006AC70
		public static void setCodePageToUTF8()
		{
			if (WindowsConsole.shouldManageConsole)
			{
				if (!WindowsConsole.SetConsoleOutputCP(65001U))
				{
					int lastWin32Error = Marshal.GetLastWin32Error();
					UnturnedLog.warn("Unable to set Windows console output code page: {0}", new object[]
					{
						lastWin32Error
					});
				}
				if (!WindowsConsole.SetConsoleCP(65001U))
				{
					int lastWin32Error2 = Marshal.GetLastWin32Error();
					UnturnedLog.warn("Unable to set Windows console input code page: {0}", new object[]
					{
						lastWin32Error2
					});
				}
			}
		}

		// Token: 0x06001DD7 RID: 7639 RVA: 0x0006CADF File Offset: 0x0006ACDF
		public static void RegisterCtrlHandler(Action<WindowsConsole.ECtrlType> callback)
		{
			if (WindowsConsole.shouldManageConsole)
			{
				WindowsConsole.ctrlHandlerCallback = callback;
				WindowsConsole.SetConsoleCtrlHandler(new WindowsConsole.HandlerRoutine(WindowsConsole.CtrlHandlerRoutine), true);
			}
		}

		// Token: 0x06001DD8 RID: 7640 RVA: 0x0006CB06 File Offset: 0x0006AD06
		private static bool CtrlHandlerRoutine(WindowsConsole.ECtrlType ctrlType)
		{
			Action<WindowsConsole.ECtrlType> action = WindowsConsole.ctrlHandlerCallback;
			if (action != null)
			{
				action.Invoke(ctrlType);
			}
			Thread.Sleep(4000);
			return true;
		}

		// Token: 0x06001DD9 RID: 7641
		[DllImport("kernel32.dll")]
		private static extern bool SetConsoleCtrlHandler(WindowsConsole.HandlerRoutine handlerRoute, bool add);

		/// <summary>
		/// Should we manually create and destroy a Win32 console?
		/// Useful for IO on Windows desktop, but not as much for dedicated machines.
		/// </summary>
		// Token: 0x04000DF3 RID: 3571
		private static CommandLineFlag shouldManageConsole = new CommandLineFlag(true, "-NoWin32Console");

		// Token: 0x04000DF4 RID: 3572
		private static Action<WindowsConsole.ECtrlType> ctrlHandlerCallback;

		// Token: 0x02000930 RID: 2352
		public enum ECtrlType
		{
			/// <summary>
			/// A CTRL+C signal was received, either from keyboard input or from a signal generated by the GenerateConsoleCtrlEvent function.
			/// </summary>
			// Token: 0x040032A0 RID: 12960
			CTRL_C_EVENT,
			/// <summary>
			/// A CTRL+BREAK signal was received, either from keyboard input or from a signal generated by GenerateConsoleCtrlEvent.
			/// </summary>
			// Token: 0x040032A1 RID: 12961
			CTRL_BREAK_EVENT,
			/// <summary>
			/// A signal that the system sends to all processes attached to a console when the user closes the console
			/// (either by clicking Close on the console window's window menu, or by clicking the End Task button command from Task Manager).
			/// </summary>
			// Token: 0x040032A2 RID: 12962
			CTRL_CLOSE_EVENT
		}

		// Token: 0x02000931 RID: 2353
		// (Invoke) Token: 0x06004A92 RID: 19090
		private delegate bool HandlerRoutine(WindowsConsole.ECtrlType ctrlType);
	}
}
